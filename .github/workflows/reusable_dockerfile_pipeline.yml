name: Docker Build & Publish

on:
  workflow_call:
    inputs:
      dockerfile:
        required: false
        type: string
        description: "Path to Dockerfile"
        default: "Dockerfile"
      packageName:
        required: false
        type: string
        description: "You can specify a different package name."
        default: "${{ github.repository }}"

env:
  REGISTRY: ghcr.io
  MAINTAINER: ${{ github.repository_owner }}
  DESCRIPTION: "${{ github.repository_owner }} repository ${{ github.repository }}"

jobs:
  prepare-env:
    runs-on: "ubuntu-latest"
    outputs:
      output_short_sha: ${{ steps.setting_env.outputs.short_sha }}
      output_image_name: ${{ steps.setting_env.outputs.image_name }}
    steps:
      - name: Checkout
        uses: "actions/checkout@v4"

      - name: Add vars to ENV
        id: setting_env
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
          echo "short_sha=`echo ${GITHUB_SHA} | cut -c1-8`" >> "$GITHUB_OUTPUT"
          # yamllint disable
          echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "image_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
          # here we validate if we have specified a different package name in
          # the inputs, if so, we change the package to it.
          if [[ ${{ inputs.packageName }} != ${{ github.repository}} ]];then
            # validate the input package name characters
            if [[ ! "${{ inputs.packageName }}" =~ ^[A-Za-z0-9\-]+$ ]]; then
              echo "------------------------------------------------------------"
              echo "ERROR: Package name not valid! => [ ${{ inputs.packageName }} ]"
              echo "ONLY can use: A-Za-z0-9\-"
              echo "------------------------------------------------------------"
              exit 1
            fi
            echo "IMAGE_NAME=$(echo ${{ github.repository_owner }}/${{ inputs.packageName }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
            echo "image_name=$(echo ${{ github.repository_owner }}/${{ inputs.packageName }} | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
          fi
          # yamllint enable

  docker-security:
    needs: prepare-env
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: "actions/checkout@v4"

      - name: Build and Push
        uses: docker/build-push-action@v5
        env:
          OUTPUT_SHORT_SHA: ${{ needs.prepare-env.outputs.output_short_sha }}
          OUTPUT_IMAGE_NAME: ${{ needs.prepare-env.outputs.output_image_name }}
        with:
          context: .
          push: false
          platforms: linux/amd64
          # we're building the container before the scan, use the short sha tag
          # for referring to it later
          tags: ${{ env.OUTPUT_IMAGE_NAME }}:${{ env.OUTPUT_SHORT_SHA }}
          file: ${{ inputs.dockerfile }}

      - name: Run Trivy vulnerability scanner
        # source: https://github.com/aquasecurity/trivy-action
        # https://github.com/marketplace/actions/aqua-security-trivy
        uses: aquasecurity/trivy-action@master
        env:
          OUTPUT_SHORT_SHA: ${{ needs.prepare-env.outputs.output_short_sha }}
          OUTPUT_IMAGE_NAME: ${{ needs.prepare-env.outputs.output_image_name }}
        with:
          # here we use the local tag that we've built before
          image-ref: "${{ env.OUTPUT_IMAGE_NAME }}:${{ env.OUTPUT_SHORT_SHA }}"
          format: "table"
          #exit-code: '1' # uncomment to stop the CI if the scanner fails
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

  docker-build:
    runs-on: "ubuntu-latest"
    # wait until the jobs are finished.
    needs: ["prepare-env", "docker-security"]
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: "actions/checkout@v4"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        env:
          OUTPUT_SHORT_SHA: ${{ needs.prepare-env.outputs.output_short_sha }}
          OUTPUT_IMAGE_NAME: ${{ needs.prepare-env.outputs.output_image_name }}
        with:
          images: ${{ env.REGISTRY }}/${{ env.OUTPUT_IMAGE_NAME }}
          # yamllint disable
          labels: |
            maintainer=${{ env.MAINTAINER }}
            commitUrl=https://github.com/${{ github.repository }}/commit/${{ github.sha }}
            dockerPull=docker pull ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.OUTPUT_SHORT_SHA }}
            org.opencontainers.image.description=${{ env.DESCRIPTION }}
          tags: |
            # output minimal (short sha)
            type=raw,value={{sha}}
            # output v0.2.1/v*-* (or sha of no tag)
            type=semver,pattern={{raw}}
            # pull request event
            type=ref,enable=true,prefix=pr-,suffix=,event=pr
          # yamllint enable

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build amd64 images always, and publish when it is not a fork. The Github
      # security model prevents forks from pushing to the registry so we can
      # only push if the branch/PR is not generated from a fork. Even though
      # forks can't push, we still want to try and build the image to catch
      # bugs. For testing purposes we only need an amd64 image.
      - name: Build and Push Docker Image amd64
        uses: docker/build-push-action@v5
        env:
          OUTPUT_SHORT_SHA: ${{ needs.prepare-env.outputs.output_short_sha }}
          OUTPUT_IMAGE_NAME: ${{ needs.prepare-env.outputs.output_image_name }}
        with:
          context: .
          provenance: false
          platforms: linux/amd64
          # Only push if the head and base repos match, meaning it is not a fork
          # yamllint disable
          push: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
          # yamllint enable
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile }}

      # Build and Publish images on main, master, and versioned branches.
      #
      # NOTES:
      # This step overrides the tag from the previous step. It will re-use
      # the cached image that was built and only build the remaining images.
      #
      # The reason we split out these steps into 2 is for better handling of
      # forks when building amd64 images and to enable faster availability of
      # the amd64 image since building the arm64 image takes significantly
      # longer.
      - name: Build and Push Docker Images
        uses: docker/build-push-action@v5
        # yamllint disable
        # only run when the branch is main, master or starts with v*
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
        # yamllint enable
        env:
          OUTPUT_SHORT_SHA: ${{ needs.prepare-env.outputs.output_short_sha }}
          OUTPUT_IMAGE_NAME: ${{ needs.prepare-env.outputs.output_image_name }}
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          provenance: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile }}
